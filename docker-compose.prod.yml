version: '3.4'

services:
  server:
    container_name: server
    image: ghcr.io/albinr99salt/no-name_server:latest
    depends_on:
      - graylog
      - db
    env_file:
      - '.env'
    networks:
      - local
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/health" ]
      interval: 10s
      timeout: 5s
      retries: 10

  db:
    container_name: pg_db
    image: postgres
    restart: unless-stopped
    networks:
      - local
    ports:
      - 5432:5432
    env_file:
      - '.env'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    container_name: redis
    image: "redis:alpine"
    command: redis-server
    networks:
      - local
    environment:
      - REDIS_REPLICATION_MODE=master
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 10

  frontend:
    container_name: frontend
    image: ghcr.io/albinr99salt/no-name_frontend:latest
    networks:
      - local
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000" ]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    container_name: nginx
    image: nginx:latest
    restart: unless-stopped
    depends_on:
      - frontend
      - server
      - grafana
      - graylog
    networks:
      - local
      - public
    ports:
      - 80:80
      - 443:443
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - ./${NGINX_CONF_FILE}:/etc/nginx/nginx.conf
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 10

  #### GRAYLOG SERVICES ####
  mongodb:
    container_name: graylog_mongodb
    image: "mongo:4.2"
    volumes:
      - "mongodb_data:/data/db"
    restart: "unless-stopped"
    networks:
      - local
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s

  elasticsearch:
    container_name: graylog_elastic
    environment:
      ES_JAVA_OPTS: "-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true"
      bootstrap.memory_lock: "true"
      discovery.type: "single-node"
      http.host: "0.0.0.0"
      action.auto_create_index: "false"
    image: "docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2"
    ulimits:
      memlock:
        hard: -1
        soft: -1
    volumes:
      - "es_data:/usr/share/elasticsearch/data"
    restart: "unless-stopped"
    networks:
      - local
    healthcheck:
      test: curl -s http://localhost:9200 >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s

  graylog:
    container_name: graylog
    image: "graylog/graylog:4.2"
    depends_on:
      - elasticsearch
      - mongodb
    entrypoint: "/usr/bin/tini -- wait-for-it elasticsearch:9200 --  /docker-entrypoint.sh"
    environment:
      GRAYLOG_NODE_ID_FILE: "/usr/share/graylog/data/config/node-id"
      GRAYLOG_PASSWORD_SECRET: ${GRAYLOG_PASSWORD_SECRET}
      GRAYLOG_ROOT_PASSWORD_SHA2: ${GRAYLOG_ROOT_PASSWORD_SHA2}
      GRAYLOG_HTTP_BIND_ADDRESS: "0.0.0.0:9000"
      GRAYLOG_HTTP_EXTERNAL_URI: "http://localhost:9000/"
      GRAYLOG_ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
      GRAYLOG_MONGODB_URI: "mongodb://mongodb:27017/graylog"
    networks:
      - local
    volumes:
      - graylog_data:/usr/share/graylog/data/data
      - graylog_journal:/usr/share/graylog/data/journal
    restart: "unless-stopped"
    healthcheck:
      test: "curl localhost:9000"
      interval: 30s
      timeout: 10s
      retries: 10

  ### PROMETHEUS AND GRAFANA SERVICES ###
  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter:latest
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - local
    healthcheck:
      test: "wget -q -Y off -O /dev/null http://localhost:9100 > /dev/null 2>&1"
      interval: 10s
      timeout: 4s
      retries: 5

  postgres-exporter:
    container_name: postgres-exporter
    image: prometheuscommunity/postgres-exporter
    environment:
      - DATA_SOURCE_URI=${POSTGRES_HOST}/${POSTGRES_DB}?sslmode=disable
      - DATA_SOURCE_USER=${POSTGRES_USER}
      - DATA_SOURCE_PASS=${POSTGRES_PASSWORD}
    networks:
      - local
    depends_on:
      - db
    restart: unless-stopped
    healthcheck:
      test: "wget -q -Y off -O /dev/null http://localhost:9187 > /dev/null 2>&1"
      interval: 10s
      timeout: 4s
      retries: 5

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    user: root
    restart: unless-stopped
    depends_on:
      - node-exporter
      - postgres-exporter
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - local
    healthcheck:
      test: "wget -q -Y off -O /dev/null http://localhost:9090 > /dev/null 2>&1"
      interval: 15s
      timeout: 7s
      retries: 3

  grafana:
    container_name: grafana
    image: grafana/grafana
    user: "472"
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/etc/grafana/provisioning/
    env_file:
      - .env
    networks:
      - local
    restart: unless-stopped
    healthcheck:
      test: "wget -q -Y off -O /dev/null http://localhost:3000/login > /dev/null 2>&1"
      interval: 15s
      timeout: 7s
      retries: 3

### GRAYLOG AND PROM/GRAFANA VOLUMES ###
volumes:
  mongodb_data:
  es_data:
  graylog_data:
  graylog_journal:
  prometheus_data: { }
  grafana_data: { }

networks:
  local:
    driver: bridge
    external: false
  public:
    driver: bridge